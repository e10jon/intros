generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReviewStrategy {
  Human
  AI
}

enum ReviewStatus {
  Pending
  Completed
}

enum UserStatus {
  Active
  UnderReview
  Suspended
}

model User {
  id                          String     @id @default(cuid())
  clerkId                     String     @unique
  status                      UserStatus @default(Active)
  firstName                   String?
  middleName                  String?
  lastName                    String?
  email                       String?    @unique
  emailIsVerified             Boolean    @default(false)
  phone                       String?    @unique
  phoneIsVerified             Boolean    @default(false)
  plaidIdentityVerificationId String?
  identityIsVerified          Boolean    @default(false)
  stripeCustomerId            String?    @unique
  stripeSubscriptionId        String?
  paymentIsActive             Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile               Profile?
  messagesSent          Message[]            @relation("userFrom")
  messagesReceived      Message[]            @relation("userTo")
  conversationsStarted  Conversation[]       @relation("userFrom")
  conversationsJoined   Conversation[]       @relation("userTo")
  conversationTokens    ConversationToken[]
  reports               ConversationReport[]
  reviews               Review[]
  conversationsRejected Conversation[]       @relation("userRejected")
}

model Review {
  id       String         @id @default(cuid())
  strategy ReviewStrategy
  status   ReviewStatus   @default(Pending)
  notes    String?

  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Profile {
  id    String  @id @default(cuid())
  name  String?
  photo String?
  title String?
  bio   String?

  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Conversation {
  id              String    @id @default(cuid())
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?

  fromUserId       String
  toUserId         String
  rejectedByUserId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  userFrom     User                 @relation("userFrom", fields: [fromUserId], references: [id])
  userTo       User                 @relation("userTo", fields: [toUserId], references: [id])
  userRejected User?                @relation("userRejected", fields: [rejectedByUserId], references: [id])
  token        ConversationToken?
  reports      ConversationReport[]
}

model ConversationReport {
  id String @id @default(cuid())

  conversationId String
  userId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model ConversationToken {
  id String @id @default(cuid())

  conversationId String? @unique
  userId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])
}

model Message {
  id String @id @default(cuid())

  fromUserId     String
  toUserId       String
  conversationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id])
  userFrom     User         @relation("userFrom", fields: [fromUserId], references: [id])
  userTo       User         @relation("userTo", fields: [toUserId], references: [id])
}
