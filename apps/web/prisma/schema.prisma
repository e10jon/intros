generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReportStrategy {
  Human
  AI
}

enum ReportStatus {
  Pending
  Completed
}

enum UserStatus {
  Active
  UnderReview
  Suspended
}

model User {
  id               String  @id @default(cuid())
  clerkId          String  @unique
  email            String? @unique
  phone            String? @unique
  stripeCustomerId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile               Profile?
  messagesSent          Message[]      @relation("userFrom")
  messagesReceived      Message[]      @relation("userTo")
  conversationsStarted  Conversation[] @relation("userFrom")
  conversationsJoined   Conversation[] @relation("userTo")
  conversationsRejected Conversation[] @relation("userRejected")
  tokens                Token[]
  reportsAsSuspect      Report[]       @relation("reportsAsSuspect")
  reportsAsReporter     Report[]       @relation("reportsAsReporter")
}

model Profile {
  id    String  @id @default(cuid())
  name  String?
  photo String?
  title String?
  bio   String?

  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Conversation {
  id              String    @id @default(cuid())
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?

  fromUserId       String
  toUserId         String
  rejectedByUserId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  userFrom     User      @relation("userFrom", fields: [fromUserId], references: [id])
  userTo       User      @relation("userTo", fields: [toUserId], references: [id])
  userRejected User?     @relation("userRejected", fields: [rejectedByUserId], references: [id])
  token        Token?

  @@index([fromUserId])
  @@index([toUserId])
}

model Report {
  id       String         @id @default(cuid())
  status   ReportStatus   @default(Pending)
  strategy ReportStrategy
  notes    String?

  suspectId  String
  reporterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reporter User @relation("reportsAsReporter", fields: [reporterId], references: [id])
  suspect  User @relation("reportsAsSuspect", fields: [suspectId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([suspectId])
  @@index([reporterId])
}

model Token {
  id String @id @default(cuid())

  conversationId String? @unique
  userId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])

  @@index([userId])
  @@index([conversationId])
}

model Message {
  id String @id @default(cuid())

  fromUserId     String
  toUserId       String
  conversationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id])
  userFrom     User         @relation("userFrom", fields: [fromUserId], references: [id])
  userTo       User         @relation("userTo", fields: [toUserId], references: [id])

  @@index([conversationId])
}
