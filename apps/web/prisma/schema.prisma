generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReportStrategy {
  Human
  AI
}

enum ReportStatus {
  Pending
  Completed
}

enum UserStatus {
  Active
  UnderReview
  Suspended
}

enum EmailFrequency {
  Daily
  Weekly
  Monthly
}

enum DayOfWeek {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

model User {
  id               String    @id @default(cuid())
  clerkId          String    @unique
  email            String?   @unique
  phone            String?   @unique
  stripeCustomerId String?   @unique
  nextTokenReset   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile                   Profile?
  conversationsStarted      Conversation[]             @relation("userFrom")
  conversationsJoined       Conversation[]             @relation("userTo")
  conversationsRejected     Conversation[]             @relation("userRejected")
  conversationsMuted        Conversation[]             @relation("userMuted")
  conversationNotifications ConversationNotification[]
  messages                  Message[]
  tokens                    Token[]
  reportsAsSuspect          Report[]                   @relation("reportsAsSuspect")
  reportsAsReporter         Report[]                   @relation("reportsAsReporter")
  settings                  UserSettings?

  @@index([nextTokenReset]) // for the add-monthly-tokens job
}

model Profile {
  id                    String   @id @default(cuid())
  name                  String?
  photo                 String?
  title                 String?
  bio                   String?
  interests             String[]
  country               String?
  province              String?
  responseRate          Float?
  numNewIntrosRemaining Int      @default(1)

  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Conversation {
  id              String    @id @default(cuid())
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?

  fromUserId       String
  toUserId         String
  rejectedByUserId String?
  mutedByUserId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages      Message[]
  userFrom      User                       @relation("userFrom", fields: [fromUserId], references: [id])
  userTo        User                       @relation("userTo", fields: [toUserId], references: [id])
  userRejected  User?                      @relation("userRejected", fields: [rejectedByUserId], references: [id])
  userMuted     User?                      @relation("userMuted", fields: [mutedByUserId], references: [id])
  token         Token?
  notifications ConversationNotification[]

  @@unique([fromUserId, toUserId])
  @@index([toUserId])
}

model Report {
  id       String         @id @default(cuid())
  status   ReportStatus   @default(Pending)
  strategy ReportStrategy
  notes    String?

  suspectId  String
  reporterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reporter User @relation("reportsAsReporter", fields: [reporterId], references: [id])
  suspect  User @relation("reportsAsSuspect", fields: [suspectId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([suspectId])
  @@index([reporterId])
}

model Token {
  id String @id @default(cuid())

  conversationId String? @unique
  userId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])

  @@index([userId])
  @@index([conversationId])
}

model Message {
  id   String @id @default(cuid())
  body String

  userId         String
  conversationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([conversationId])
}

model ConversationNotification {
  id                String    @id @default(cuid())
  numUnreadMessages Int       @default(1)
  seenAt            DateTime?

  userId         String
  conversationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}

model UserSettings {
  id                   String          @id @default(cuid())
  pushToken            String?
  emailFrequency       EmailFrequency?
  sendEmailsTime       DateTime?
  sendEmailsDayOfWeek  DayOfWeek?
  dailyIntrosLimit     Int?
  dailyIntrosResetTime DateTime?
  timeZone             String?

  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
